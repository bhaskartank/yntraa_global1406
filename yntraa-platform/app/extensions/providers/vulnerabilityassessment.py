# encoding: utf-8
# pylint: disable=no-self-use
"""
VA setup.
"""

import requests, ssl, json
import logging
import xml.etree.ElementTree as ET

log = logging.getLogger(__name__)

class VAApi(object):
    
    def __init__(self, app=None):
        if app:
            self.init_app(app)

    def init_app(self, app):

        self.url = 'https://qualysapi.ndcad.yntraa.com'
        self.headers = {
            'Content-Type': "application/xml",
            'Cache-Control': "no-cache",
            'X-Requested-With': "Curl Sample"
        }
        return self

    def connect(self, service_provider_meta):        
        
        kwargs = {}
        for meta in service_provider_meta:
            if meta.meta_key == 'username' :
                kwargs['username'] = meta.meta_value
            if meta.meta_key == 'password' :
                kwargs['password'] = meta.meta_value       
        return kwargs

    def authorization(self, service_provider_meta):

        auth_key = self.connect(service_provider_meta)
        return (auth_key['username'], auth_key['password'])    
    
    def create_tag(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/2.0/create/am/tag"
        payload = f"""<?xml version="1.0" encoding="UTF-8" ?>
            <ServiceRequest>
            <data>
            <Tag>
            <name>{kwargs['tag_name']}</name>
            <ruleType>NAME_CONTAINS</ruleType>
            <ruleText>{kwargs['tag_text']}</ruleText>
            </Tag>
            </data>
            </ServiceRequest>"""

        response = requests.post(url=url, data=payload, auth=self.authorization(service_provider_meta), headers=self.headers, verify=False)
        
        log.info(f'create_tag status_code = {response.status_code}')
        return response.text
    
    def create_activation_key(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/1.0/create/ca/agentactkey/"
        payload = f"""<?xml version="1.0" encoding="UTF-8"?>
            <ServiceRequest>
            <data>
            <AgentActKey>
            <type>UNLIMITED</type>
            <modules>
            <list>
            <ActivationKeyModule>
            <license>VM_LICENSE</license>
            </ActivationKeyModule>
            </list>
            </modules>
            <tags>
            <list>
            <Tag>
            <id>{kwargs['tag_id']}</id>
            <name>{kwargs['tag_name']}</name>
            </Tag>
            </list>
            </tags>
            <agents>
            <list/>
            </agents>
            </AgentActKey>
            </data>
            </ServiceRequest>"""

        response = requests.post(url=url, data=payload, auth=self.authorization(service_provider_meta), headers=self.headers, verify=False)

        log.info(f'create_activation_key status_code = {response.status_code}')
        return response.text

    def tag_detail(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/2.0/get/am/tag/{kwargs['tag_id']}"
        response = requests.get(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), verify=False)

        return response.text

    def create_vm_tag(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/2.0/update/am/tag/{kwargs['tag_id']}"
        tag_details = self.tag_detail(service_provider_meta, tag_id=kwargs['tag_id'])
        tag_details_xml = ET.fromstring(tag_details)

        child_tag_xml = tag_details_xml.findall('data/Tag/children/list/TagSimple')
        child_tag_set = ''
        for tag in child_tag_xml:
            child_tag_set += ET.tostring(tag).decode('UTF-8')

        payload = f"""<?xml version="1.0" encoding="UTF-8" ?> 
                <ServiceRequest> 
                <data> 
                <Tag> 
                <id>{kwargs['tag_id']}</id>
                <children> 
                <set> 
                {child_tag_set}
                <Tag>
                <name>{kwargs['tag_name']}</name>
                <ruleType>NAME_CONTAINS</ruleType>
                <ruleText>/{kwargs['tag_text']}/i</ruleText> 
                </Tag>
                </set> 
                </children> 
                </Tag> 
                </data> 
                </ServiceRequest>"""

        response = requests.post(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), data=payload, verify=False)

        if response.status_code == 200:
            log.info("vm child tag created")
        else:
            log.info('vm child tag not created')

    def update_activation_key(self, service_provider_meta, **kwargs):

        url =f"{self.url}/qps/rest/1.0/update/ca/agentactkey/{kwargs['activation_key_id']}"
        payload = f"""<?xml version="1.0" encoding="UTF-8"?>
                <ServiceRequest>
                <data>
                <AgentActKey>
                <id>{kwargs['activation_key_id']}</id>
                <type>UNLIMITED</type>
                <applyOnAgents>true</applyOnAgents>
                <modules>
                <list>
                <ActivationKeyModule>
                <license>VM_LICENSE</license>
                </ActivationKeyModule>
                </list>
                </modules>
                <tags>
                <list>
                <Tag>
                <id>{kwargs['tag_id']}</id>
                <name>{kwargs['tag_name']}</name>
                </Tag>
                </list>
                </tags>
                <agents>
                <list/>
                </agents>
                </AgentActKey>
                </data>
                </ServiceRequest>"""

        response = requests.post(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), data=payload, verfiy=False)

        if response.status_code == 200:
            log.info("activation key updated")
        else:
            log.info('activation key not updated')

    def search_tag(self, service_provider_meta, **kwargs):

        url = f'{self.url}/qps/rest/2.0/search/am/tag'

        payload = f"""<ServiceRequest> 
                <filters> 
                <Criteria field="name" operator="EQUALS">{kwargs['tag_name']}</Criteria>
                </filters> 
                </ServiceRequest>"""

        response = requests.post(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), data=payload, verify=False)

        response_xml = ET.fromstring(response.text)

        tag_id = int(response_xml.find('data/Tag/id').text)
        return tag_id

    def delete_vm_tag(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/2.0/update/am/tag/{kwargs['tag_id']}"
        vm_tag_id = self.search_tag(service_provider_meta, tag_name=kwargs['tag_name'])

        payload = f"""<?xml version="1.0" encoding="UTF-8" ?> 
                <ServiceRequest> 
                <data> 
                <Tag> 
                <id>{kwargs['tag_id']}</id>
                <children>
                <remove> 
                <TagSimple><id>{vm_tag_id}</id></TagSimple> 
                </remove> 
                </children> 
                </Tag> 
                </data> 
                </ServiceRequest>"""

        response = requests.post(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), data=payload, verify=False)

        if response.status_code == 200:
            log.info('vm child tag deleted')
        else:
            log.info('vm child tag not deleted')

    def delete_tag(self, service_provider_meta, **kwargs):

        url = f"{self.url}/qps/rest/2.0/delete/am/tag/{kwargs['tag_id']}"
        response = requests.post(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), verify=False)
        if response.status_code == 200:
            log.info('project tag deleted')
        else:
            log.info('project tag not deleted')

    def generate_report(self, service_provider_meta, **kwargs):

        url = f'{self.url}/api/2.0/fo/report/'
        payload = {
            'action': 'launch',
            'template_id': kwargs['template_id'],
            'output_format': kwargs['output_format'],
            'use_tags': 1,
            'tag_set_by': 'name',
            'tag_set_include': kwargs['vm_tag_name']
        }
        response = requests.post(url=url, data=payload, headers=self.headers, auth=self.authorization(service_provider_meta), verify=False)

        log.info(f'generate_report status_code = {response.status_code}')
        if response.status_code == 200:
            response_xml = ET.fromstring(response.text)
            report_id = int(response_xml.find('RESPONSE/ITEM_LIST/ITEM/VALUE').text)
            return report_id
        else:
            raise ConnectionError('vulnerabilityassesment generate_report error')
    
    
    def generated_va_report_list(self, service_provider_meta, **kwargs):
        
        url = f"{self.url}/api/2.0/fo/report/?action=list" 
        response = requests.get(url=url, headers=self.headers, auth=self.authorization(service_provider_meta), verify=False)    
        return response.text

    def download_va_report(self, service_provider_meta, **kwargs):
        
        url = f"{self.url}/api/2.0/fo/report/?action=fetch&id={kwargs['report_id']}"
        response = requests.get(url, headers=self.headers,  auth=self.authorization(service_provider_meta), verify=False)
        log.info(response.status_code)
        if response.status_code == 200:
            return response.content
        else:
            raise ConnectionError('vulnerabilityassesment dowload_va_report error')

